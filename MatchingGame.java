/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MatchingGame;

import javax.swing.*;
import java.awt.*;
import static java.lang.Math.random;
import static java.lang.Thread.*;
import java.util.ArrayList;
import java.util.*;

public class MatchingGame extends javax.swing.JFrame {

    private ImageIcon check;
    private ImageIcon question;
    private delayCounter counter;
    private int [] usedNums;
    private ArrayList <ImageIcon> cards;
    private int deckSize;
    private JLabel [] jArray;

    
    public MatchingGame() {
        initComponents();
        
        counter = new delayCounter(this, 1000);        
        counter.start();           

        String [] cardNames = {"dog.jpg", "boat.jpg", "ball.jpg", "flower.jpg", "owl.jpg", "bee.jpg", "cow.jpg", "mario.jpg", "penguin.jpg", "watermelon.jpg"};
          
        jArray = new JLabel []  {
                                    jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7,
                                    jLabel8, jLabel9, jLabel10, jLabel11, jLabel12, jLabel13, jLabel14,
                                    jLabel15, jLabel16, jLabel19, jLabel20, jLabel21, jLabel22
                                };
                
        usedNums = new int[(cardNames.length * 2)]; // cards will be used twice
        for(int i = 0; i < usedNums.length; i++)        // initialize array to -1 instead of the default 0 (0 will be a used number and would cause errors when checking)
            usedNums[i] = -1;
        
        deckSize = cardNames.length * 2;
        cards = new ArrayList<>();
        
        for(int i = 0; i < deckSize; i++)
            cards.add(new ImageIcon(getClass().getResource(cardNames[getRandCard()])));
                 
        question = new ImageIcon(getClass().getResource("question.jpg"));
        check = new ImageIcon(getClass().getResource("check.jpg"));   
        
        for (JLabel lbl : jArray)
        {
            lbl.setIcon(question);          
        }         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel1.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel1.setName(""); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel2.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel2.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel3.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel3.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel4.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel4.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel5.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel5.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel6.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel6.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel7.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel7.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel8.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel8.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel9.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel9.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jLabel10.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel10.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel10.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        jLabel11.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel11.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel11.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });

        jLabel12.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel12.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel12.setName(""); // NOI18N
        jLabel12.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        jLabel13.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel13.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel13.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        jLabel14.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel14.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel14.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });

        jLabel15.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel15.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel15.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        jLabel16.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel16.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel16.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });

        jLabel19.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel19.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel19.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        jLabel20.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel20.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel20.setName(""); // NOI18N
        jLabel20.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel21.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel21.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel21.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        jLabel22.setMaximumSize(new java.awt.Dimension(150, 110));
        jLabel22.setMinimumSize(new java.awt.Dimension(150, 110));
        jLabel22.setPreferredSize(new java.awt.Dimension(150, 110));
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 842, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    protected void pause()
//    {
//       try
//       {            
//            Thread.sleep(1000);
//       }
//       catch(InterruptedException e)
//       {
//           System.out.println(e);
//       }
//    }
    
    protected final int getRandCard()
    {
        boolean badNum = true;
        int holder = ((int)(random() * 100)) % (deckSize / 2);
        int randNum = 0;        
        
        while(badNum) // determine if the random number has been used twice already
        {   
            badNum = false;
            
            for (int i = 0; i < usedNums.length; i++)
            {
                if(holder == usedNums[i])
                {
                    for (int j = i + 1; j < usedNums.length; j++)
                    {
                        if(holder == usedNums[j])
                        {
                            badNum = true;
                            break;
                        }
                    }
                    
                    break;                    
                }
                
            }
            
            randNum = holder;
            holder = ((int)(random() * 100)) % (deckSize / 2);
        }        
        
        for (int i = 0; i < usedNums.length; i++) // add new number into the used array
        {
            if(usedNums[i] == -1)
            {
                usedNums[i] = randNum;
                break;
            }
        }        
        
        return randNum;
    }
    
    protected boolean checkIsFirst()
    {        
        boolean first = true;
        int count = 0;
        for (JLabel lbl : jArray)
        {
            if (!lbl.getIcon().toString().equals(question.toString()) && !lbl.getIcon().toString().equals(check.toString()))
            {
                count++;
            }            
        }
        
        if (count > 1)
        {
            first = false;
        }
        
        return first;
    }
    
    protected boolean checkTwoUp()
    {
        boolean twoUp = false;
        int count = 0;
        for (JLabel lbl : jArray)
        {
            if (!lbl.getIcon().toString().equals(question.toString()) && !lbl.getIcon().toString().equals(check.toString()))
            {
                count++;
            }            
        }
        
        if (count >= 2)
        {
            twoUp = true;
        }
        
        return twoUp;
    }
    
    protected boolean checkSelectedEqual() 
    {
        ArrayList <JLabel> SelectedArray = new ArrayList<>();
        boolean match = false;
        
        for (JLabel lbl : jArray)
        {
            if (!lbl.getIcon().toString().equals(question.toString()) && !lbl.getIcon().toString().equals(check.toString()))
            {
                SelectedArray.add(lbl);                
            }            
        }
        
        if (SelectedArray.get(0).getIcon().toString().equals(SelectedArray.get(1).getIcon().toString()))
        {
            match = true;
        }
        
        return match;
    }
        
    protected void setFalse()
    {
        ArrayList <JLabel> SelectedArray = new ArrayList<>();        
        
        for (JLabel lbl : jArray)
        {
            if (!lbl.getIcon().toString().equals(question.toString()) && !lbl.getIcon().toString().equals(check.toString()))
            {
                SelectedArray.add(lbl);                
            }            
        }        
        //pause();
        SelectedArray.get(0).setIcon(question);
        SelectedArray.get(1).setIcon(question);     
    }
    
    protected void setcorrect()
    {
        ArrayList <JLabel> SelectedArray = new ArrayList<>();        
        
        for (JLabel lbl : jArray)
        {
            if (!lbl.getIcon().toString().equals(question.toString()) && !lbl.getIcon().toString().equals(check.toString()))
            {
                SelectedArray.add(lbl);                
            }            
        }
       // pause();
        SelectedArray.get(0).setIcon(check);
        SelectedArray.get(1).setIcon(check);               
    }
            
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
       if(jLabel1.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel1.setIcon(cards.get(0));
                if(!checkIsFirst())
                counter.wake();
           }
//           if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {   
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }   
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        if(jLabel2.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel2.setIcon(cards.get(1));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        if(jLabel3.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel3.setIcon(cards.get(2));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        if(jLabel5.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel5.setIcon(cards.get(3));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        if(jLabel6.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel6.setIcon(cards.get(4));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        if(jLabel4.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel4.setIcon(cards.get(5));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        if(jLabel7.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel7.setIcon(cards.get(6));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        if(jLabel8.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel8.setIcon(cards.get(7));
                if(!checkIsFirst())
                counter.wake();
           }
//            if(!checkIsFirst())
//           {
//               if(checkSelectedEqual())
//               {
////                   pause();
//                   setcorrect();               
//               }
//               else
//               {
////                   pause();
//                   setFalse();
//               }
//           }
       }
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
       if(jLabel9.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel9.setIcon(cards.get(8));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        if(jLabel10.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel10.setIcon(cards.get(9));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        if(jLabel11.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel11.setIcon(cards.get(10));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
       if(jLabel12.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel12.setIcon(cards.get(11));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        if(jLabel13.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel13.setIcon(cards.get(12));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel13MouseClicked

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        if(jLabel14.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel14.setIcon(cards.get(13));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        if(jLabel15.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel15.setIcon(cards.get(14));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel15MouseClicked

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        if(jLabel16.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel16.setIcon(cards.get(15));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel16MouseClicked

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        if(jLabel19.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel19.setIcon(cards.get(16));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        if(jLabel20.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel20.setIcon(cards.get(17));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked
        if(jLabel21.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel21.setIcon(cards.get(18));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel21MouseClicked

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
       if(jLabel22.getIcon().toString().equals(question.toString()))
       {
           if(!checkTwoUp())
           {
                jLabel22.setIcon(cards.get(19));
                if(!checkIsFirst())
                counter.wake();
           }
       }
    }//GEN-LAST:event_jLabel22MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatchingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
